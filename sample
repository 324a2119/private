import streamlit as st
from transformers import AutoTokenizer, AutoModelForCausalLM
import torch

# --- モデル読み込み ---
tokenizer = AutoTokenizer.from_pretrained("cyberagent/open-calm-1b")
model = AutoModelForCausalLM.from_pretrained("cyberagent/open-calm-1b")

# --- ユーザー管理（簡易的にセッション内で） ---
if 'users' not in st.session_state:
    st.session_state.users = {}  # {'user1': 'pass1', ...}

if 'current_user' not in st.session_state:
    st.session_state.current_user = None

if 'chat_history' not in st.session_state:
    st.session_state.chat_history = {}  # {user: {subject: [(Q, A), ...]}}

if 'subject' not in st.session_state:
    st.session_state.subject = []

if 'materials' not in st.session_state:
    st.session_state.materials = {}

# --- 認証UI ---
st.sidebar.title("ログイン / 新規登録")

auth_mode = st.sidebar.radio("モード選択", ["ログイン", "新規登録"])
username = st.sidebar.text_input("ユーザー名")
password = st.sidebar.text_input("パスワード", type="password")

if auth_mode == "新規登録":
    if st.sidebar.button("登録"):
        if username in st.session_state.users:
            st.sidebar.error("そのユーザー名は既に存在します")
        else:
            st.session_state.users[username] = password
            st.sidebar.success("登録完了！ログインしてください")
elif auth_mode == "ログイン":
    if st.sidebar.button("ログイン"):
        if st.session_state.users.get(username) == password:
            st.session_state.current_user = username
            st.sidebar.success(f"{username} としてログインしました")
        else:
            st.sidebar.error("ユーザー名またはパスワードが間違っています")

# --- ログイン後のみ機能使用可能 ---
if st.session_state.current_user:
    user = st.session_state.current_user
    st.title(f"ようこそ, {user} さん！")

    # --- 授業管理 ---
    input_subject = st.sidebar.text_input('追加したい授業名を入力')
    if input_subject:
        if input_subject not in st.session_state.subject:
            st.session_state.subject.append(input_subject)
            st.session_state.materials[input_subject] = ""

    delete_subject = st.sidebar.multiselect('削除したい授業名を選択', st.session_state.subject)
    for subj in delete_subject:
        st.session_state.subject.remove(subj)
        if subj in st.session_state.materials:
            del st.session_state.materials[subj]

    select_subject = st.sidebar.selectbox('授業を選択してください', st.session_state.subject)

    # --- 資料アップロード ---
    st.subheader(f"選択中の授業: {select_subject}")
    uploaded_file = st.file_uploader("授業資料をアップロード（.txt）", type=["txt"])
    if uploaded_file:
        content = uploaded_file.read().decode('utf-8')
        st.session_state.materials[select_subject] = content
        st.success(f"{select_subject} の資料を保存しました")

    # --- 質問 ---
    input_chat = st.text_area("授業に関する質問を入力してください")

    if st.button("送信"):
        context = st.session_state.materials.get(select_subject, "")
        prompt = f"{context}\n\n質問: {input_chat}\n答え:"

        inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=1024)
        outputs = model.generate(**inputs, max_new_tokens=100)
        answer = tokenizer.decode(outputs[0], skip_special_tokens=True)
        answer_cleaned = answer.replace(prompt, "").strip()

        st.write("AIの回答:")
        st.write(answer_cleaned)

        # --- チャット履歴保存 ---
        user_hist = st.session_state.chat_history.setdefault(user, {})
        subject_hist = user_hist.setdefault(select_subject, [])
        subject_hist.append((input_chat, answer_cleaned))

    # --- チャット履歴表示 ---
    st.markdown("### チャット履歴")
    history = st.session_state.chat_history.get(user, {}).get(select_subject, [])
    for i, (q, a) in enumerate(history[::-1], 1):
        st.markdown(f"**{i}. 質問：** {q}")
        st.markdown(f"**　答え：** {a}")
        st.markdown("---")

else:
    st.warning("ログインしてください")
